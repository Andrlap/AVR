
USB_NRF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  000002c6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008000cc  008000cc  000003c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  00000438  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001bc7  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060a  00000000  00000000  00002157  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001250  00000000  00000000  00002761  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  000039b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d7  00000000  00000000  00003d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d3a  00000000  00000000  000040e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004e21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	79 c0       	rjmp	.+242    	; 0x102 <__vector_7>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>
  26:	1a c0       	rjmp	.+52     	; 0x5c <__bad_interrupt>
  28:	19 c0       	rjmp	.+50     	; 0x5c <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf ed       	ldi	r28, 0xDF	; 223
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e6 ec       	ldi	r30, 0xC6	; 198
  3a:	f2 e0       	ldi	r31, 0x02	; 2
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 3c       	cpi	r26, 0xCC	; 204
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_L__+0x1>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	ac ec       	ldi	r26, 0xCC	; 204
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a3 3e       	cpi	r26, 0xE3	; 227
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	18 d1       	rcall	.+560    	; 0x28a <main>
  5a:	33 c1       	rjmp	.+614    	; 0x2c2 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <rf24_init>:
uint8_t rf24_cmd_status(uint8_t byte1) {
	rf24_CSN_lo; //low CSN
	byte1=spi_wr_rd_byte(byte1);
	rf24_CSN_hi; //high CSN
	return byte1;
}
  5e:	80 e3       	ldi	r24, 0x30	; 48
  60:	82 bb       	out	0x12, r24	; 18
  62:	88 e7       	ldi	r24, 0x78	; 120
  64:	81 bb       	out	0x11, r24	; 17
  66:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <rf24_no>
  6a:	08 95       	ret

0000006c <rf24_set_pin>:
  6c:	e0 91 e2 00 	lds	r30, 0x00E2	; 0x8000e2 <rf24_no>
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	ee 0f       	add	r30, r30
  74:	ff 1f       	adc	r31, r31
  76:	ee 0f       	add	r30, r30
  78:	ff 1f       	adc	r31, r31
  7a:	e0 5a       	subi	r30, 0xA0	; 160
  7c:	ff 4f       	sbci	r31, 0xFF	; 255
  7e:	a0 81       	ld	r26, Z
  80:	b1 81       	ldd	r27, Z+1	; 0x01
  82:	2c 91       	ld	r18, X
  84:	e8 0f       	add	r30, r24
  86:	f1 1d       	adc	r31, r1
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 80       	ldd	r0, Z+2	; 0x02
  8e:	02 c0       	rjmp	.+4      	; 0x94 <rf24_set_pin+0x28>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <rf24_set_pin+0x24>
  98:	66 23       	and	r22, r22
  9a:	11 f0       	breq	.+4      	; 0xa0 <rf24_set_pin+0x34>
  9c:	82 2b       	or	r24, r18
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <rf24_set_pin+0x38>
  a0:	80 95       	com	r24
  a2:	82 23       	and	r24, r18
  a4:	8c 93       	st	X, r24
  a6:	08 95       	ret

000000a8 <rf24_wr2_rd>:

uint8_t rf24_wr2_rd(uint8_t byte1, uint8_t byte2) {
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	d8 2f       	mov	r29, r24
  ae:	c6 2f       	mov	r28, r22
	rf24_CSN_lo; //low CSN
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	db df       	rcall	.-74     	; 0x6c <rf24_set_pin>
	byte1=spi_wr_rd_byte(byte1);
  b6:	8d 2f       	mov	r24, r29
  b8:	0a d0       	rcall	.+20     	; 0xce <spi_wr_rd_byte>
	byte1=spi_wr_rd_byte(byte2);
  ba:	8c 2f       	mov	r24, r28
  bc:	08 d0       	rcall	.+16     	; 0xce <spi_wr_rd_byte>
  be:	c8 2f       	mov	r28, r24
	rf24_CSN_hi; //high CSN
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	d3 df       	rcall	.-90     	; 0x6c <rf24_set_pin>
	return byte1;
}
  c6:	8c 2f       	mov	r24, r28
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <spi_wr_rd_byte>:
}

uint8_t spi_wr_rd_byte (uint8_t data)
{ 
    /*no avto send*/
	USIDR = data;
  ce:	8f b9       	out	0x0f, r24	; 15
	USISR |= 1<<USIOIF;
  d0:	76 9a       	sbi	0x0e, 6	; 14
	while(!(USISR&(1<<USIOIF))){
  d2:	76 99       	sbic	0x0e, 6	; 14
  d4:	04 c0       	rjmp	.+8      	; 0xde <spi_wr_rd_byte+0x10>
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
  d6:	8b e1       	ldi	r24, 0x1B	; 27
  d8:	8d b9       	out	0x0d, r24	; 13
uint8_t spi_wr_rd_byte (uint8_t data)
{ 
    /*no avto send*/
	USIDR = data;
	USISR |= 1<<USIOIF;
	while(!(USISR&(1<<USIOIF))){
  da:	76 9b       	sbis	0x0e, 6	; 14
  dc:	fd cf       	rjmp	.-6      	; 0xd8 <spi_wr_rd_byte+0xa>
		USICR = (1<<USIWM0)|(1<<USICS1)|(1<<USICLK)|(1<<USITC);
	};
	return USIDR;
  de:	8f b1       	in	r24, 0x0f	; 15
}
  e0:	08 95       	ret

000000e2 <usart_send_str>:
		USART_UDR = buff[i];}
}


void usart_send_str(char * str)
{
  e2:	fc 01       	movw	r30, r24
	for(;*str;str++) {
  e4:	90 81       	ld	r25, Z
  e6:	99 23       	and	r25, r25
  e8:	39 f0       	breq	.+14     	; 0xf8 <usart_send_str+0x16>
  ea:	31 96       	adiw	r30, 0x01	; 1
		while ( !(USART_TX_READY) );
  ec:	5d 9b       	sbis	0x0b, 5	; 11
  ee:	fe cf       	rjmp	.-4      	; 0xec <usart_send_str+0xa>
		USART_UDR = str[0];}
  f0:	9c b9       	out	0x0c, r25	; 12
}


void usart_send_str(char * str)
{
	for(;*str;str++) {
  f2:	91 91       	ld	r25, Z+
  f4:	91 11       	cpse	r25, r1
  f6:	fa cf       	rjmp	.-12     	; 0xec <usart_send_str+0xa>
  f8:	08 95       	ret

000000fa <usart_send_char>:
		USART_UDR = str[0];}
}

void usart_send_char(char chr)
{
    while ( !(USART_TX_READY) );
  fa:	5d 9b       	sbis	0x0b, 5	; 11
  fc:	fe cf       	rjmp	.-4      	; 0xfa <usart_send_char>
    USART_UDR = chr;
  fe:	8c b9       	out	0x0c, r24	; 12
 100:	08 95       	ret

00000102 <__vector_7>:

void scan08_tri(void){
	_delay_ms(10000);
	SE8R01_powerup();

	uint8_t x = 0xff;
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
 11a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <buff+0x12>
 11e:	88 23       	and	r24, r24
 120:	19 f0       	breq	.+6      	; 0x128 <__vector_7+0x26>
 122:	81 30       	cpi	r24, 0x01	; 1
 124:	39 f0       	breq	.+14     	; 0x134 <__vector_7+0x32>
 126:	2a c0       	rjmp	.+84     	; 0x17c <__vector_7+0x7a>
 128:	ee ec       	ldi	r30, 0xCE	; 206
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	82 8b       	std	Z+18, r24	; 0x12
 130:	13 8a       	std	Z+19, r1	; 0x13
 132:	11 8a       	std	Z+17, r1	; 0x11
 134:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <buff+0x13>
 138:	81 11       	cpse	r24, r1
 13a:	20 c0       	rjmp	.+64     	; 0x17c <__vector_7+0x7a>
 13c:	8c b1       	in	r24, 0x0c	; 12
 13e:	8a 30       	cpi	r24, 0x0A	; 10
 140:	d1 f0       	breq	.+52     	; 0x176 <__vector_7+0x74>
 142:	8d 30       	cpi	r24, 0x0D	; 13
 144:	c1 f0       	breq	.+48     	; 0x176 <__vector_7+0x74>
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	20 91 df 00 	lds	r18, 0x00DF	; 0x8000df <buff+0x11>
 14c:	20 31       	cpi	r18, 0x10	; 16
 14e:	08 f4       	brcc	.+2      	; 0x152 <__vector_7+0x50>
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <buff+0x13>
 156:	91 11       	cpse	r25, r1
 158:	11 c0       	rjmp	.+34     	; 0x17c <__vector_7+0x7a>
 15a:	ae ec       	ldi	r26, 0xCE	; 206
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	51 96       	adiw	r26, 0x11	; 17
 160:	ec 91       	ld	r30, X
 162:	51 97       	sbiw	r26, 0x11	; 17
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	9e 0f       	add	r25, r30
 168:	51 96       	adiw	r26, 0x11	; 17
 16a:	9c 93       	st	X, r25
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	e2 53       	subi	r30, 0x32	; 50
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	81 83       	std	Z+1, r24	; 0x01
 174:	03 c0       	rjmp	.+6      	; 0x17c <__vector_7+0x7a>
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <buff+0x13>
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <scan08>:
 194:	2f e3       	ldi	r18, 0x3F	; 63
 196:	8d e0       	ldi	r24, 0x0D	; 13
 198:	93 e0       	ldi	r25, 0x03	; 3
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <scan08+0x6>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <scan08+0x10>
 1a4:	00 00       	nop
 1a6:	b5 9b       	sbis	0x16, 5	; 22
 1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <scan08+0x1e>
 1aa:	8c e9       	ldi	r24, 0x9C	; 156
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	99 df       	rcall	.-206    	; 0xe2 <usart_send_str>
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <scan08+0x24>
 1b2:	83 ea       	ldi	r24, 0xA3	; 163
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	95 df       	rcall	.-214    	; 0xe2 <usart_send_str>
 1b8:	2f e3       	ldi	r18, 0x3F	; 63
 1ba:	8d e0       	ldi	r24, 0x0D	; 13
 1bc:	93 e0       	ldi	r25, 0x03	; 3
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <scan08+0x2a>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <scan08+0x34>
 1c8:	00 00       	nop
 1ca:	6f ef       	ldi	r22, 0xFF	; 255
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	6c df       	rcall	.-296    	; 0xa8 <rf24_wr2_rd>
 1d0:	81 fd       	sbrc	r24, 1
 1d2:	0d c0       	rjmp	.+26     	; 0x1ee <scan08+0x5a>
 1d4:	6f ef       	ldi	r22, 0xFF	; 255
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	67 df       	rcall	.-306    	; 0xa8 <rf24_wr2_rd>
 1da:	68 2f       	mov	r22, r24
 1dc:	62 60       	ori	r22, 0x02	; 2
 1de:	80 e2       	ldi	r24, 0x20	; 32
 1e0:	63 df       	rcall	.-314    	; 0xa8 <rf24_wr2_rd>
 1e2:	86 e7       	ldi	r24, 0x76	; 118
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <scan08+0x52>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <scan08+0x58>
 1ec:	00 00       	nop
 1ee:	63 e7       	ldi	r22, 0x73	; 115
 1f0:	80 e5       	ldi	r24, 0x50	; 80
 1f2:	5a df       	rcall	.-332    	; 0xa8 <rf24_wr2_rd>
 1f4:	89 ef       	ldi	r24, 0xF9	; 249
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <scan08+0x64>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <scan08+0x6a>
 1fe:	00 00       	nop
 200:	6f ef       	ldi	r22, 0xFF	; 255
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	51 df       	rcall	.-350    	; 0xa8 <rf24_wr2_rd>
 206:	68 2f       	mov	r22, r24
 208:	61 60       	ori	r22, 0x01	; 1
 20a:	80 e2       	ldi	r24, 0x20	; 32
 20c:	4d df       	rcall	.-358    	; 0xa8 <rf24_wr2_rd>
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	2c df       	rcall	.-424    	; 0x6c <rf24_set_pin>
 214:	d0 e0       	ldi	r29, 0x00	; 0
 216:	87 ea       	ldi	r24, 0xA7	; 167
 218:	91 e6       	ldi	r25, 0x61	; 97
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <scan08+0x86>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <scan08+0x8c>
 220:	00 00       	nop
 222:	8a ea       	ldi	r24, 0xAA	; 170
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	5d df       	rcall	.-326    	; 0xe2 <usart_send_str>
 228:	b5 9b       	sbis	0x16, 5	; 22
 22a:	04 c0       	rjmp	.+8      	; 0x234 <scan08+0xa0>
 22c:	8d ea       	ldi	r24, 0xAD	; 173
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	58 df       	rcall	.-336    	; 0xe2 <usart_send_str>
 232:	03 c0       	rjmp	.+6      	; 0x23a <scan08+0xa6>
 234:	83 eb       	ldi	r24, 0xB3	; 179
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	54 df       	rcall	.-344    	; 0xe2 <usart_send_str>
 23a:	9f e9       	ldi	r25, 0x9F	; 159
 23c:	26 e8       	ldi	r18, 0x86	; 134
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	91 50       	subi	r25, 0x01	; 1
 242:	20 40       	sbci	r18, 0x00	; 0
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	e1 f7       	brne	.-8      	; 0x240 <scan08+0xac>
 248:	00 c0       	rjmp	.+0      	; 0x24a <scan08+0xb6>
 24a:	00 00       	nop
 24c:	cd 2f       	mov	r28, r29
 24e:	6c 2f       	mov	r22, r28
 250:	85 e2       	ldi	r24, 0x25	; 37
 252:	2a df       	rcall	.-428    	; 0xa8 <rf24_wr2_rd>
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	09 df       	rcall	.-494    	; 0x6c <rf24_set_pin>
 25a:	96 ea       	ldi	r25, 0xA6	; 166
 25c:	9a 95       	dec	r25
 25e:	f1 f7       	brne	.-4      	; 0x25c <scan08+0xc8>
 260:	00 c0       	rjmp	.+0      	; 0x262 <scan08+0xce>
 262:	6d 2f       	mov	r22, r29
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	02 df       	rcall	.-508    	; 0x6c <rf24_set_pin>
 268:	6f ef       	ldi	r22, 0xFF	; 255
 26a:	89 e0       	ldi	r24, 0x09	; 9
 26c:	1d df       	rcall	.-454    	; 0xa8 <rf24_wr2_rd>
 26e:	87 3a       	cpi	r24, 0xA7	; 167
 270:	30 f0       	brcs	.+12     	; 0x27e <scan08+0xea>
 272:	6f ef       	ldi	r22, 0xFF	; 255
 274:	89 e0       	ldi	r24, 0x09	; 9
 276:	18 df       	rcall	.-464    	; 0xa8 <rf24_wr2_rd>
 278:	86 57       	subi	r24, 0x76	; 118
 27a:	3f df       	rcall	.-386    	; 0xfa <usart_send_char>
 27c:	02 c0       	rjmp	.+4      	; 0x282 <scan08+0xee>
 27e:	8e e2       	ldi	r24, 0x2E	; 46
 280:	3c df       	rcall	.-392    	; 0xfa <usart_send_char>
 282:	cf 5f       	subi	r28, 0xFF	; 255
 284:	ce 37       	cpi	r28, 0x7E	; 126
 286:	19 f7       	brne	.-58     	; 0x24e <scan08+0xba>
 288:	c6 cf       	rjmp	.-116    	; 0x216 <scan08+0x82>

0000028a <main>:
	
}

int main(void)
{
	LED_INIT;
 28a:	87 b3       	in	r24, 0x17	; 23
 28c:	8f 61       	ori	r24, 0x1F	; 31
 28e:	87 bb       	out	0x17, r24	; 23
 290:	c4 9a       	sbi	0x18, 4	; 24
 292:	c3 9a       	sbi	0x18, 3	; 24
	SPI_INIT;
 294:	87 b3       	in	r24, 0x17	; 23
 296:	80 6c       	ori	r24, 0xC0	; 192
 298:	87 bb       	out	0x17, r24	; 23
	USART_INIT;
 29a:	59 9a       	sbi	0x0b, 1	; 11
 29c:	12 b8       	out	0x02, r1	; 2
 29e:	8c e0       	ldi	r24, 0x0C	; 12
 2a0:	89 b9       	out	0x09, r24	; 9
 2a2:	88 e1       	ldi	r24, 0x18	; 24
 2a4:	8a b9       	out	0x0a, r24	; 10
 2a6:	8e e0       	ldi	r24, 0x0E	; 14
 2a8:	83 b9       	out	0x03, r24	; 3
	USART_SET_IRQ;
 2aa:	57 9a       	sbi	0x0a, 7	; 10
    MCUCR = 0; // MCUCR = (1<<ISC00)|(1<<ISC01);// over Level
 2ac:	15 be       	out	0x35, r1	; 53
    //   GIMSK |= (1<<INT0); RX1
	
	xfunc_out = usart_send_char;
 2ae:	8d e7       	ldi	r24, 0x7D	; 125
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	90 93 cd 00 	sts	0x00CD, r25	; 0x8000cd <__data_end+0x1>
 2b6:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__data_end>
	rf24_init();
 2ba:	d1 de       	rcall	.-606    	; 0x5e <rf24_init>
	rf24_no = 0;
 2bc:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <rf24_no>
//	scan08_tri();
	
	scan08();
 2c0:	69 df       	rcall	.-302    	; 0x194 <scan08>

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
